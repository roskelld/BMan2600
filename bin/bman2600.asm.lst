------- FILE bman2600.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
      4  10000 ????						;; Includes
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bman2600.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bman2600.asm
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????						; XMACRO.H
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
------- FILE bman2600.asm
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
     10  0000 ????						;; Start unitialized segment at $80 for variables
     11  0000 ????						;; Range is $80 to $FF minus a few bytes at the end if the stack is used
     12  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     13 U0091 ????				      seg.u	variables
     14 U0080					      org	$80
     15 U0080		       00	   P0POSX     byte.b		; player position X
     16 U0081		       00	   P0POSY     byte.b		; player position Y
     17 U0082		       00 00	   P0SPRPTR   word.w		; Pointer to P0 sprite lookup table
     18 U0084		       00 00	   P0COLPTR   word.w		; Pointer to P0 color lookup table
     19 U0086		       00	   P0ANMSET   byte.b		; P0 sprite animation frame offset
     20 U0087		       00	   P0DRAW     byte.b		; P0 Draw Height
     21 U0088		       00	   ANIMCOUNTER byte.b		; Current animation update countdown
     22 U0089		       00	   MOVECOUNTER byte.b		; Counter to track updating movement
     23 U008a		       00	   ANIM_FRAME byte.b		; Tracks if we're on first or second animation frame
     24 U008b
     25 U008b		       00	   ARENAINDEX byte.b		; Draw index of Arena
     26 U008c		       00	   ARENA_SWITCH byte.b		; Toggle tracker
     27 U008d		       00	   ARENACOUNTER byte.b		; Tracks the update for the arena
     28 U008e							; ARENAPTRPF1		   word
     29 U008e							; ARENAPTRPF2		   word
     30 U008e		       00 00	   BOMB_SPRITE_PTR word.w		;
     31 U0090		       00	   TEMP       ds	1	; Scratch Variable
     32 U0091							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
     33 U0091							;; Define Constants
     34 U0091							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35 U0091							;PLAYER_HEIGHT 		 = $11	     ; player 0 sprite height (# rows in lookup table)
     36 U0091		       00 a0	   MOVE_RATE  =	160	; Speed of player movement (255 == 100%)
     37 U0091		       00 14	   ANIM_RATE  =	20	; Speed of player movement (255 == 100%)
     38 U0091		       00 00	   SPRITE_OFFSET_IDLE =	0	; Offset position of facing idle sprite
     39 U0091		       00 11	   SPRITE_OFFSET_DOWN =	$11	; Offset position of facing down sprite
     40 U0091		       00 22	   SPRITE_OFFSET_UP =	$22	; Offset position of facing up sprite
     41 U0091		       00 33	   SPRITE_OFFSET_RIGHT =	$33	; Offset position of facing right sprite
     42 U0091		       00 44	   SPRITE_FRAME_OFFSET =	$44	; Second frame of animation offset
     43 U0091		       00 a8	   UP_BOUNDS  =	$A8	; Top Player Boundary
     44 U0091		       00 10	   DOWN_BOUNDS =	$10	; Bottom Player Boundary
     45 U0091		       00 0a	   LEFT_BOUNDS =	$0A	; Left Player Boundary
     46 U0091		       00 6c	   RIGHT_BOUNDS =	$6c	; Right Player Boundary
     47 U0091		       00 01	   VERTICAL_STEP =	$1
     48 U0091		       00 01	   HORIZONTAL_STEP =	$1
     49 U0091		       00 a5	   ARENA_HEIGHT =	$A5	; (0-83)*2=166 scanlines for arena (2LK)
     50 U0091		       00 c3	   ARENA_BG   =	$C3
     51 U0091
     52 U0091		       00 10	   X_LANE_START =	$10
     53 U0091		       00 1e	   X_LANE_UPDATE =	$1E
     54 U0091		       00 07	   X_LANE_WALK_UP =	$7
     55 U0091		       00 07	   X_LANE_BLOCKED =	$7
     56 U0091		       00 0f	   X_LANE_WALK_DOWN =	$F
     57 U0091
     58 U0091		       00 0a	   Y_LANE_START =	$0A
     59 U0091		       00 10	   Y_LANE_UPDATE =	$10
     60 U0091		       00 05	   Y_LANE_WALK_RIGHT =	$5
     61 U0091		       00 05	   Y_LANE_BLOCKED =	$5
     62 U0091		       00 05	   Y_LANE_WALK_LEFT =	$5
     63 U0091
     64 U0091		       00 09	   BOMB_HGT   =	$9
     65 U0091		       00 0a	   TEST_BOMB_X =	$0A	; 
     66 U0091		       00 7a	   TEST_BOMB_Y =	$7A	; Cell 38
     67 U0091							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
     68 U0091							;; Start ROM segment
     69 U0091							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     70  10000 ????				       seg	code
     71  f000					      org	$F000
     72  f000
     73  f000				   RESET
      0  f000					      CLEAN_START		; Macro to safely clear the memory
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     75  f00b
     76  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
     77  f00b							;; Init Variables
     78  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     79  f00b		       a9 00		      lda	#%00000000
     80  f00d		       85 8a		      sta	ANIM_FRAME	; Set first animation frame to 0
     81  f00f		       a9 0b		      lda	#$0b
     82  f011		       85 80		      sta	P0POSX	; Set Player 0 X
     83  f013		       a9 a5		      lda	#$A5
     84  f015		       85 81		      sta	P0POSY	; Set Player 0 Y
     85  f017
     86  f017		       a9 0f		      lda	#15
     87  f019		       85 8d		      sta	ARENACOUNTER	; Set the Arena counter
     88  f01b		       a9 00		      lda	#0
     89  f01d		       85 8b		      sta	ARENAINDEX	; Offset of arena map data
     90  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
     91  f01f							;; Init Pointers
     92  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     93  f01f
     94  f01f		       a9 58		      lda	#<IdleSprite
     95  f021		       85 82		      sta	P0SPRPTR	; lo-byte pointer for P0 sprite lookup table
     96  f023		       a9 f2		      lda	#>IdleSprite
     97  f025		       85 83		      sta	P0SPRPTR+1	; hi-byte pointer for P0 sprite lookup table
     98  f027
     99  f027		       a9 e9		      lda	#<ColorFrame0
    100  f029		       85 84		      sta	P0COLPTR	; lo-byte pointer for P0 color lookup table
    101  f02b		       a9 f2		      lda	#>ColorFrame0
    102  f02d		       85 85		      sta	P0COLPTR+1	; hi-byte pointer for P0 color lookup table
    103  f02f
    104  f02f		       a9 e0		      lda	#<Bomb0
    105  f031		       85 8e		      sta	BOMB_SPRITE_PTR
    106  f033		       a9 f2		      lda	#>Bomb0
    107  f035		       85 8f		      sta	BOMB_SPRITE_PTR+1
    108  f037
    109  f037							; lda #<ARENA_0_PF1
    110  f037							; sta ARENAPTRPF1
    111  f037							; lda #>ARENA_0_PF1
    112  f037							; sta ARENAPTRPF1+1
    113  f037
    114  f037							; lda #<ARENA_0_PF2
    115  f037							; sta ARENAPTRPF2
    116  f037							; lda #>ARENA_0_PF2
    117  f037							; sta ARENAPTRPF2+1
    118  f037
    119  f037							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    120  f037							;; Start a new frame loop
    121  f037							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    122  f037				   STARTFRAME
      0  f037					      VERTICAL_SYNC
      1  f037		       a9 0e		      lda	#%1110
      2  f039		       85 02	   .VSLP1     sta	WSYNC
      3  f03b		       85 00		      sta	VSYNC
      4  f03d		       4a		      lsr
      5  f03e		       d0 f9		      bne	.VSLP1
    124  f040							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    125  f040							;; VBLANK - 37 SCANLINES
    126  f040							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f040					      TIMER_SETUP	20
      1  f040				   .lines     SET	20
      2  f040		       a9 16		      lda	#(((.lines-1)*76-14)/64)
      3  f042		       85 02		      sta	WSYNC
      4  f044		       8d 96 02 	      sta	TIM64T
    128  f047							; Cycles    Total   - Comment
    129  f047				   ANIMUPDATE
    130  f047		       a5 88		      lda	ANIMCOUNTER	;		     -
    131  f049		       18		      clc		;		     -
    132  f04a		       69 14		      adc	#ANIM_RATE	;		     -
    133  f04c		       85 88		      sta	ANIMCOUNTER	;		     -
    134  f04e		       90 06		      bcc	.SKIPANIM	;		     -
    135  f050		       a5 8a		      lda	ANIM_FRAME	;		     -
    136  f052		       49 44		      EOR	#SPRITE_FRAME_OFFSET	;		     -
    137  f054		       85 8a		      sta	ANIM_FRAME	;		     -
    138  f056				   .SKIPANIM		;		     -
    139  f056				   MOVEUPDATE		;		     -
    140  f056		       a5 89		      lda	MOVECOUNTER	;		     -
    141  f058		       18		      clc		;		     -
    142  f059		       69 a0		      adc	#MOVE_RATE	;		     -
    143  f05b		       85 89		      sta	MOVECOUNTER	;		     -
    144  f05d		       90 03		      bcc	.SKIPMOVE	;		     -
    145  f05f		       20 13 f1 	      jsr	ProcessJoystick	;		     -
    146  f062				   .SKIPMOVE		;		     -
    147  f062		       a5 80		      lda	P0POSX	;		     -
    148  f064		       a0 00		      ldy	#0	;		     - Set Y to tell SETXPOS P0 sprite 
    149  f066		       20 df f0 	      jsr	SETXPOS	;		     - Set P0 horizontal position
    150  f069
    151  f069							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    152  f069							;; END VBLANK
    153  f069							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f069					      TIMER_WAIT
      1  f069				   .waittimer
      2  f069		       ad 84 02 	      lda	INTIM
      3  f06c		       d0 fb		      bne	.waittimer
    155  f06e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  f06e							;; Display 192 SCANLINES
    157  f06e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    158  f06e							; clean up ;; find a better place to do this
    159  f06e		       a9 00		      lda	#0
    160  f070		       85 8b		      sta	ARENAINDEX
    161  f072							; Cycles    Total   - Comment
    162  f072		       a2 19		      ldx	#25	;  2		     - Score scanlines
    163  f074		       a9 07		      lda	#$07	;  2		     - color
    164  f076		       85 09		      sta	COLUBK	;  3		     - background
    165  f078		       85 08		      sta	COLUPF	;  3		     - playfield
    166  f07a		       a9 01		      lda	#%00000001	;		     - Reflect on
    167  f07c		       85 0a		      sta	CTRLPF	;		     - Set playfield reflection to true
    168  f07e				   SCORE_PANEL
    169  f07e		       85 02		      sta	WSYNC	;  3		     - wait for scanline
    170  f080		       ca		      dex		;  2		     - X--
    171  f081		       d0 fb		      bne	SCORE_PANEL	;  2		     - repeat until score panel is drawn
    172  f083				   ARENA_SETUP
    173  f083		       a9 c3		      lda	#ARENA_BG	;		     - background color  (61st scanline)
    174  f085		       85 09		      sta	COLUBK	;		     - set background color
    175  f087		       a9 09		      lda	#$09	;		     - playfield color
    176  f089		       85 08		      sta	COLUPF	;		     - set playfield color
    177  f08b		       a9 01		      lda	#1
    178  f08d		       85 8d		      sta	ARENACOUNTER	;		     - We pull new arena data every 15 lines
    179  f08f		       a9 f0		      lda	#%11110000	; 2		     - Load PF0 slice (Always the same, so outside of loop)
    180  f091		       85 0d		      sta	PF0	; 3		     - set PF0
    181  f093							;---------------------------------------------------- START OF GAME PLAY ZONE	  
    182  f093							; Cycles    Total   - Comment
    183  f093		       a9 ff		      lda	#$ff
    184  f095		       85 06		      sta	COLUP0
    185  f097
    186  f097							; Start Loop
    187  f097							; ARENA_LOOP:
    188  f097							; ; Pre-Calc Line 1
    189  f097							;     lda #PLAYER_HEIGHT-1	   ;	 2	       -
    190  f097							;     dcp P0DRAW		   ;	 5	       -
    191  f097							;     bcs .DRAW_GROUP_0	   ;	 2	       -
    192  f097							;     lda #0			   ;	 2	       -
    193  f097							;     .byte $2C		   ;	 4	       -
    194  f097							; .DRAW_GROUP_0		   ;		       -
    195  f097							;     lda (P0SPRPTR),y 	   ;	 5	       -
    196  f097							;     sta WSYNC		   ;	 3	       -
    197  f097							; ; ----------------------------------------------------
    198  f097							; ; Line 1 Draw
    199  f097							;     sta GRP0 		   ;	 3	  3
    200  f097
    201  f097
    202  f097							; Pre-Calc Line 2
    203  f097							; Load Group 1
    204  f097							; WSYNC
    205  f097							;   sta WSYNC	  
    206  f097							; Draw Group 1
    207  f097							; Dec Arena Height
    208  f097							; Back to Start
    209  f097							;    dey			  ;    2
    210  f097							;    bpl ARENA_LOOP		  ;    2      
    211  f097
    212  f097							;; --------------------------------------------
    213  f097							;; TODO
    214  f097							;; Figure out how to add the animation offset to the P0SPRPTR
    215  f097							;; Do the same for the P0COLPTR
    216  f097							;; Reconfigure the map lay out for player movement, collision, bounds
    217  f097							;; See if there's a way to pre-calc the arena counter
    218  f097							;; It's better to aim for the same cycles per scanline beause you can 
    219  f097							;; control the maximum then and always know what it will be
    220  f097
    221  f097							; Load Arena Height into Y
    222  f097		       a0 a5		      ldy	#ARENA_HEIGHT	;		     - playfield scanlines
    223  f099				   .SLINE_LOOP		;		     - Gameplay Zone Scanline Loop
    224  f099		       a9 10		      lda	#PLAYER_HEIGHT-1	;     2	     -
    225  f09b		       c7 87		      dcp	P0DRAW	;     5	     -
    226  f09d		       b0 03		      bcs	.DRAW_GROUP_0	;     2	     -
    227  f09f		       a9 00		      lda	#0	;     2	     -
    228  f0a1		       2c		      .byte.b	$2C	;     4	     - Skips next line via absolute addressing
    229  f0a2				   .DRAW_GROUP_0		;		     -
    230  f0a2		       b1 82		      lda	(P0SPRPTR),y	;     5	     -
    231  f0a4		       85 02		      sta	WSYNC	;     3      0/78   - Start new Scanline
    232  f0a6		       85 1b		      sta	GRP0	;     3      3      - Write A to P0 register
    233  f0a8
    234  f0a8
    235  f0a8				   .ARENA_COUNT_DOWN		; (7/8 Cycles)      - Every 15 scanlines update PF1 and PF2
    236  f0a8		       c6 8d		      dec	ARENACOUNTER	;     5      5      - Count down arena draw counter 
    237  f0aa		       d0 12		      bne	.DECREMENT_SCANLINE	;     2/3    7/9    - Jump to sprite check if no arena update needed
    238  f0ac				   .RST_ARENA_COUNTER		; (5 Cycles)	     - [UPDATE ARENA] Reset update counter
    239  f0ac		       a9 0f		      lda	#15	;     2      9      - Reset Arena map update counter
    240  f0ae		       85 8d		      sta	ARENACOUNTER	;     3     12      - Store the arena draw counter
    241  f0b0				   .DRAW_ARENA		; (22 Cycles)	     - 
    242  f0b0		       a6 8b		      ldx	ARENAINDEX	;     3     15      - Get the map data offset
    243  f0b2		       bd 7e f3 	      lda	ARENA_0_PF1,x	;     4     19      - Load PF1
    244  f0b5		       85 0e		      sta	PF1	;     3     22      - set PF1 slice
    245  f0b7		       bd 89 f3 	      lda	ARENA_0_PF2,x	;     4     26      - Load PF2
    246  f0ba		       85 0f		      sta	PF2	;     3     29      - Set PF2 slice
    247  f0bc		       e6 8b		      inc	ARENAINDEX	;     5     34      - Move to next line of arena map data
    248  f0be
    249  f0be							;.INSIDE_P0:			  ; (13/14 Cycles)    - P0 Position draw check 
    250  f0be							;     txa			   ;	 2     36      - Transfer X to A
    251  f0be							;     sec			   ;	 2     38      - Set carry before subtraction
    252  f0be							;     sbc P0POSY		   ;	 3     41      - Subtract sprite Y coord
    253  f0be							;     cmp #PLAYER_HEIGHT	   ;	 2     43      - Current scanline inside p0 sprite bounds?
    254  f0be							;     bcc .DRAWSPRP0		   ;	 2/3   45      - Draw P0 sprite routine
    255  f0be							;     lda #0			   ;	 2     47      - else, index to 0
    256  f0be							; .DRAWSPRP0:			   ; (23 Cycles)       - P0 Draw sprite slice
    257  f0be							;     clc			   ;	 2     49      -  
    258  f0be							;     adc P0ANMSET		   ;	 3     52      - Add animation frame offset ($0/$44)
    259  f0be							;     tay			   ;	 2     54      - load Y so we can work with pointer
    260  f0be							;     lda (P0SPRPTR),Y 	   ;	 5     59      - 
    261  f0be							;     sta GRP0 		   ;	 3     62      - set graphics for player0
    262  f0be							;     lda (P0COLPTR),Y 	   ;	 5     67      -
    263  f0be							;     sta COLUP0		   ;	 3     70      - set color of player 0
    264  f0be
    265  f0be
    266  f0be							; .INSIDE_BOMB:
    267  f0be							;     txa
    268  f0be							;     sec 
    269  f0be							;     sbc #TEST_BOMB_Y
    270  f0be							;     cmp #BOMB_HGT
    271  f0be							;     bcc .DRAWBOMB
    272  f0be							;     lda #0
    273  f0be							; .DRAWBOMB
    274  f0be							;     clc
    275  f0be							;     tay 
    276  f0be							;     lda (BOMB_SPRITE_PTR),Y
    277  f0be							;     sta GRP1 
    278  f0be							;     lda #$0
    279  f0be							;     sta COLUP1
    280  f0be
    281  f0be				   .DECREMENT_SCANLINE		; (5 Cycles)	     - Decrement Scanline loop 
    282  f0be		       88		      dey		;     2     72      - Reduce scanline counter (x)
    283  f0bf		       d0 d8		      bne	.SLINE_LOOP	;     3     75      - repeat until screen is drawn
    284  f0c1							;---------------------------------------------------- END OF GAME PLAY ZONE
    285  f0c1
    286  f0c1
    287  f0c1
    288  f0c1				   .BOTTOM		;		     - [BOTTOM PANEL] Start of Bottom Panel
    289  f0c1		       85 02		      sta	WSYNC	;-----3 ----78------- wait for scanline
    290  f0c3		       a2 06		      ldx	#6	;     2	     - Bottom panel scanlines (6 for P0 color 19 for not)
    291  f0c5		       a9 07		      lda	#$07	;     2	     - panel color
    292  f0c7		       85 09		      sta	COLUBK	;     3	     - background
    293  f0c9		       85 08		      sta	COLUPF	;     3	     - playfield set both the same to create border
    294  f0cb				   BOTTOM_PANEL
    295  f0cb		       85 02		      sta	WSYNC	;		     - wait for scanline
    296  f0cd		       ca		      dex		;		     - X--
    297  f0ce		       d0 fb		      bne	BOTTOM_PANEL	;		     - repeat until screen is drawn
    298  f0d0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    299  f0d0							;; OVERSCAN - 30 SCANLINES
    300  f0d0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    301  f0d0				   OVERSCAN
      0  f0d0					      TIMER_SETUP	30
      1  f0d0				   .lines     SET	30
      2  f0d0		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f0d2		       85 02		      sta	WSYNC
      4  f0d4		       8d 96 02 	      sta	TIM64T
      0  f0d7					      TIMER_WAIT
      1  f0d7				   .waittimer
      2  f0d7		       ad 84 02 	      lda	INTIM
      3  f0da		       d0 fb		      bne	.waittimer
    304  f0dc
    305  f0dc		       4c 46 f2 	      jmp	NEXTFRAME
    306  f0df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    307  f0df							;; Subroutine to handle object horizontal position with fine offset
    308  f0df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    309  f0df							;; A is target X-coord position
    310  f0df							;; Y is object (0: P0, 1: P1, 2: MISSILE0, 3: MISSILE1, 4: BALL)
    311  f0df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    312  f0df				   SETXPOS    Subroutine
    313  f0df		       85 02		      sta	WSYNC	; Start fresh scanline
    314  f0e1		       85 2b		      sta	HMCLR	; clear old horizontal position values
    315  f0e3		       38		      sec		; set carry flag before subtraction
    316  f0e4				   .DIVIDE_LOOP
    317  f0e4		       e9 0f		      sbc	#15	; A -= 15
    318  f0e6		       b0 fc		      bcs	.DIVIDE_LOOP	; Loop while carry flag is still set
    319  f0e8
    320  f0e8		       49 07		      eor	#7	; adjust remainder in A between -8 and 7
    321  f0ea		       0a		      asl		; shift left by 4 as HMP0 only uses 4 bits
    322  f0eb		       0a		      asl
    323  f0ec		       0a		      asl
    324  f0ed		       0a		      asl
    325  f0ee		       99 20 00 	      sta	HMP0,Y	; set the fine position
    326  f0f1		       99 10 00 	      sta	RESP0,Y	; reset the 15-step rough position
    327  f0f4		       85 02		      sta	WSYNC	;
    328  f0f6		       85 2a		      sta	HMOVE	; Apply fine position
    329  f0f8
    330  f0f8							; Prepare P0 Y for 2LK
    331  f0f8		       a2 01		      ldx	#1	; preload X for setting VDELPx
    332  f0fa		       a5 81		      lda	P0POSY	; get the P0 Y position
    333  f0fc							;clc			      ;
    334  f0fc							;adc #1		      ; add 1 to compensate for priming of GRP0 
    335  f0fc							; Removed the divide, not sure how to incorporate it into the code
    336  f0fc							;lsr			      ; divide by 2 for the 2LK position
    337  f0fc		       85 90		      sta	TEMP	; save for position calculations
    338  f0fe
    339  f0fe							; P0 Sprite Height in Arena
    340  f0fe							; P0DRAW = ARENA_HEIGHT + PLAYER_HEIGHT - P0POSY + 1
    341  f0fe		       a9 b6		      lda	#(ARENA_HEIGHT + PLAYER_HEIGHT)
    342  f100		       38		      sec
    343  f101		       e5 81		      sbc	P0POSY
    344  f103		       85 87		      sta	P0DRAW
    345  f105
    346  f105							; P0 Sprite Pointer
    347  f105		       a9 68		      lda	#<(#IdleSprite + PLAYER_HEIGHT - 1)
    348  f107		       38		      sec
    349  f108		       e5 90		      sbc	TEMP
    350  f10a		       85 82		      sta	P0SPRPTR
    351  f10c		       a9 f2		      lda	#>(#IdleSprite + PLAYER_HEIGHT - 1)
    352  f10e		       e9 00		      sbc	#0
    353  f110		       85 83		      sta	P0SPRPTR+1
    354  f112
    355  f112		       60		      rts
    356  f113							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    357  f113							;; Process joystick input for player 0
    358  f113							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    359  f113							;; Movement is single direction (up, down, left OR right) If no direction is 
    360  f113							;; detected then the character gets reset to idle. This works by each direction 
    361  f113							;; branching to the next if not true, then right (last direction) falling 
    362  f113							;; through to a reset branch.
    363  f113							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    364  f113				   ProcessJoystick Subroutine
    365  f113		       a6 81		      ldx	P0POSY
    366  f115							; Cycles    Total   - Comment
    367  f115				   IPT_P0_UP
    368  f115		       a9 10		      lda	#%00010000	;	2	 2   - UP
    369  f117		       2c 80 02 	      bit	SWCHA	;	4	 6   - 
    370  f11a		       d0 44		      bne	IPT_P0_DN	;    2/3      8/9   - If not by pass UP logic
    371  f11c		       a9 00		      lda	#%00000000	;	2	10   - Reset sprite flip
    372  f11e		       85 0b		      sta	REFP0	;	3	13   - Set register
    373  f120		       a9 22		      lda	#SPRITE_OFFSET_UP	;		     - Up Animation Frame base address
    374  f122		       18		      clc		;		     - Clear the carry flag
    375  f123		       65 8a		      adc	ANIM_FRAME	;		     - Add current anim frame offset
    376  f125		       85 86		      sta	P0ANMSET	;		     - Store frame to P0 Animation
    377  f127
    378  f127		       a4 80		      ldy	P0POSX
    379  f129		       a9 0a		      lda	#Y_LANE_START	;		     - Sets A to the start of the map
    380  f12b				   .UP_NEXT_LANE		;		     -
    381  f12b		       69 10		      adc	#Y_LANE_UPDATE	;		     - Lane loop value
    382  f12d				   .UP_LOOP		;		     -
    383  f12d		       18		      clc		;		     -
    384  f12e		       c5 80		      cmp	P0POSX	;		     -
    385  f130		       30 f9		      BMI	.UP_NEXT_LANE	;		     - Y is above A Lane so check Lane above
    386  f132		       e9 05		      sbc	#Y_LANE_WALK_RIGHT	;		     - Walk up zone		
    387  f134		       c5 80		      cmp	P0POSX	;		     - 
    388  f136		       30 12		      BMI	.UP_WALK_RIGHT	;		     - Branch to walk up if Y is <
    389  f138		       e9 05		      sbc	#Y_LANE_BLOCKED	;		     - Subtract to Blocked walk value
    390  f13a		       c5 80		      cmp	P0POSX	;		     - 
    391  f13c		       30 12		      BMI	.UP_DONT_MOVE	;		     - Branch to blocked walk if Y is <
    392  f13e		       e9 05		      sbc	#Y_LANE_WALK_LEFT	;		     - Subtract to Walk down value
    393  f140		       c5 80		      cmp	P0POSX	;		     - 
    394  f142		       f0 0f		      BEQ	.UP_WALK	;		     - Branch to walk UP if Y = 
    395  f144				   .UP_WALK_LEFT		;		     - 
    396  f144		       88		      dey		;		     - 
    397  f145		       84 80		      sty	P0POSX	;		     - 
    398  f147		       4c 5f f1 	      jmp	.UP_RETURN	;		     - 
    399  f14a				   .UP_WALK_RIGHT		;		     -
    400  f14a		       c8		      iny		;		     - Move down 1
    401  f14b		       84 80		      sty	P0POSX	;		     - 
    402  f14d		       4c 5f f1 	      jmp	.UP_RETURN	;		     - 
    403  f150				   .UP_DONT_MOVE		;		     - 
    404  f150		       4c 5f f1 	      jmp	.UP_RETURN	;		     - 
    405  f153				   .UP_WALK		;		     - 
    406  f153		       e8		      inx		;		     - Move UP
    407  f154				   .UP_EXIT		;		     - 
    408  f154		       e0 a8		      cpx	#UP_BOUNDS	;		     - Test new Y position against top of level
    409  f156		       f0 07		      beq	.UP_RETURN	;		     - Skip storing update if out of bounds
    410  f158		       e8		      inx		;		     - Move Up again (Aim to move up 2x in one update)
    411  f159				   .UP_EXIT_2
    412  f159		       e0 a8		      cpx	#UP_BOUNDS	;		     - Test new Y position against top of level
    413  f15b		       f0 02		      beq	.UP_RETURN	;		     - Skip storing update if out of bounds
    414  f15d		       86 81		      stx	P0POSY	;		     - Store new X position
    415  f15f				   .UP_RETURN		;		     - Don't add any more direction (We only support 4 direction movement)
    416  f15f		       60		      rts
    417  f160				   IPT_P0_DN
    418  f160		       a9 20		      lda	#%00100000	;		     - DOWN
    419  f162		       2c 80 02 	      bit	SWCHA	;	4	 6   - 
    420  f165		       d0 43		      bne	IPT_P0_LT	;		     - If not by pass DOWN logic
    421  f167		       a9 11		      lda	#SPRITE_OFFSET_DOWN	;		     - Down Animation Frame base address
    422  f169		       18		      clc		;		     - Clear the carry flag
    423  f16a		       65 8a		      adc	ANIM_FRAME	;		     - Add current anim frame offset
    424  f16c		       85 86		      sta	P0ANMSET	;		     - Store frame to P0 Animation
    425  f16e
    426  f16e
    427  f16e		       a4 80		      ldy	P0POSX
    428  f170		       a9 0a		      lda	#Y_LANE_START	;		     - Sets A to the start of the map
    429  f172				   .DN_NEXT_LANE		;		     -
    430  f172		       69 10		      adc	#Y_LANE_UPDATE	;		     - Lane loop value
    431  f174				   .DN_LOOP		;		     -
    432  f174		       18		      clc		;		     -
    433  f175		       c5 80		      cmp	P0POSX	;		     -
    434  f177		       30 f9		      BMI	.DN_NEXT_LANE	;		     - Y is above A Lane so check Lane above
    435  f179		       e9 05		      sbc	#Y_LANE_WALK_RIGHT	;		     - Walk up zone		
    436  f17b		       c5 80		      cmp	P0POSX	;		     - 
    437  f17d		       30 12		      BMI	.DN_WALK_RIGHT	;		     - Branch to walk up if Y is <
    438  f17f		       e9 05		      sbc	#Y_LANE_BLOCKED	;		     - Subtract to Blocked walk value
    439  f181		       c5 80		      cmp	P0POSX	;		     - 
    440  f183		       30 12		      BMI	.DN_DONT_MOVE	;		     - Branch to blocked walk if Y is <
    441  f185		       e9 05		      sbc	#Y_LANE_WALK_LEFT	;		     - Subtract to Walk down value
    442  f187		       c5 80		      cmp	P0POSX	;		     - 
    443  f189		       f0 0f		      BEQ	.DN_WALK	;		     - Branch to walk DN if Y = 
    444  f18b				   .DN_WALK_LEFT		;		     - 
    445  f18b		       88		      dey		;		     - 
    446  f18c		       84 80		      sty	P0POSX	;		     - 
    447  f18e		       4c a9 f1 	      jmp	.DN_RETURN	;		     - 
    448  f191				   .DN_WALK_RIGHT		;		     -
    449  f191		       c8		      iny		;		     - Move down 1
    450  f192		       84 80		      sty	P0POSX	;		     - 
    451  f194		       4c a9 f1 	      jmp	.DN_RETURN	;		     - 
    452  f197				   .DN_DONT_MOVE		;		     - 
    453  f197		       4c a9 f1 	      jmp	.DN_RETURN	;		     - 
    454  f19a				   .DN_WALK		;		     - 
    455  f19a		       ca		      dex		;		     - Move DN
    456  f19b		       4c 9e f1 	      jmp	.DN_EXIT	;		     - 
    457  f19e				   .DN_EXIT		;		     - 
    458  f19e		       e0 10		      cpx	#DOWN_BOUNDS	;		     - Test new X position against DN of level
    459  f1a0		       f0 07		      beq	.DN_RETURN	;		     - Skip storing update if out of bounds
    460  f1a2		       ca		      dex
    461  f1a3				   .DN_EXIT_2
    462  f1a3		       e0 10		      cpx	#DOWN_BOUNDS	;		     - Test new X position against DN of level
    463  f1a5		       f0 02		      beq	.DN_RETURN	;		     - Skip storing update if out of bounds    
    464  f1a7		       86 81		      stx	P0POSY	;		     - Store new X position
    465  f1a9				   .DN_RETURN		;		     - Don't add any more direction (We only support 4 direction movement)
    466  f1a9		       60		      rts
    467  f1aa				   IPT_P0_LT
    468  f1aa		       a6 80		      ldx	P0POSX	;		     - Load Position X to X Register
    469  f1ac		       a9 40		      lda	#%01000000	;		     - LEFT
    470  f1ae		       2c 80 02 	      bit	SWCHA	;	4	 6   - 
    471  f1b1		       d0 42		      bne	IPT_P0_RT	;		     - If not by pass LEFT logic
    472  f1b3		       a9 08		      lda	#%00001000	;		     - Flip sprite left
    473  f1b5		       85 0b		      sta	REFP0	;		     - Set register
    474  f1b7		       a9 33		      lda	#SPRITE_OFFSET_RIGHT	;		     - Right Animation Frame base address
    475  f1b9		       18		      clc		;		     - Clear the carry flag
    476  f1ba		       65 8a		      adc	ANIM_FRAME	;		     - Add current anim frame offset
    477  f1bc		       85 86		      sta	P0ANMSET	;		     - Store frame to P0 Animation
    478  f1be
    479  f1be							;; Lane Check Loop
    480  f1be		       a4 81		      ldy	P0POSY
    481  f1c0		       a9 10		      lda	#X_LANE_START	;		     - Sets a to bottom bounds
    482  f1c2				   .LEFT_NEXT_LANE		;		     -
    483  f1c2		       69 1e		      adc	#X_LANE_UPDATE	;		     - Lane loop value
    484  f1c4				   .LEFT_LOOP		;		     -
    485  f1c4		       18		      clc		;		     -
    486  f1c5		       c5 81		      cmp	P0POSY	;		     -
    487  f1c7		       30 f9		      BMI	.LEFT_NEXT_LANE	;		     - Y is above A Lane so check Lane above
    488  f1c9		       e9 07		      sbc	#X_LANE_WALK_UP	;		     - Walk up zone		
    489  f1cb		       c5 81		      cmp	P0POSY	;		     - 
    490  f1cd		       30 12		      BMI	.LEFT_WALK_UP	;		     - Branch to walk up if Y is <
    491  f1cf		       e9 07		      sbc	#X_LANE_BLOCKED	;		     - Subtract to Blocked walk value
    492  f1d1		       c5 81		      cmp	P0POSY	;		     - 
    493  f1d3		       30 12		      BMI	.LEFT_DONT_MOVE	;		     - Branch to blocked walk if Y is <
    494  f1d5		       e9 0f		      sbc	#X_LANE_WALK_DOWN	;		     - Subtract to Walk down value
    495  f1d7		       c5 81		      cmp	P0POSY	;		     - 
    496  f1d9		       f0 0f		      BEQ	.LEFT_WALK	;		     - Branch to walk left if Y = 
    497  f1db				   .LEFT_WALK_DOWN		;		     -
    498  f1db		       88		      dey		;		     - Move down 1
    499  f1dc		       84 81		      sty	P0POSY	;		     - 
    500  f1de		       4c f4 f1 	      jmp	.LEFT_RETURN	;		     - 
    501  f1e1				   .LEFT_WALK_UP		;		     - 
    502  f1e1		       c8		      iny		;		     - 
    503  f1e2		       84 81		      sty	P0POSY	;		     - 
    504  f1e4		       4c f4 f1 	      jmp	.LEFT_RETURN	;		     - 
    505  f1e7				   .LEFT_DONT_MOVE		;		     - 
    506  f1e7		       4c f4 f1 	      jmp	.LEFT_RETURN	;		     - 
    507  f1ea				   .LEFT_WALK		;		     - 
    508  f1ea		       ca		      dex		;		     - Move Left
    509  f1eb		       4c ee f1 	      jmp	.LEFT_EXIT	;		     - 
    510  f1ee				   .LEFT_EXIT		;		     - 
    511  f1ee		       e0 0a		      cpx	#LEFT_BOUNDS	;		     - Test new X position against left of level
    512  f1f0		       f0 02		      beq	.LEFT_RETURN	;		     - Skip storing update if out of bounds
    513  f1f2		       86 80		      stx	P0POSX	;		     - Store new X position
    514  f1f4				   .LEFT_RETURN 		;		     - Don't add any more direction (We only support 4 direction movement)
    515  f1f4		       60		      rts		;		     -
    516  f1f5				   IPT_P0_RT
    517  f1f5		       a9 80		      lda	#%10000000	;		     - RIGHT
    518  f1f7		       2c 80 02 	      bit	SWCHA	;	4	 6   - 
    519  f1fa		       d0 42		      bne	INP_P0_RST	;		     - If not by pass RIGHT logic
    520  f1fc		       a9 00		      lda	#%00000000	;		     - Reset sprite flip
    521  f1fe		       85 0b		      sta	REFP0	;		     - Set register
    522  f200		       a9 33		      lda	#SPRITE_OFFSET_RIGHT	;		     - Right Animation Frame base address
    523  f202		       18		      clc		;		     - Clear the carry flag
    524  f203		       65 8a		      adc	ANIM_FRAME	;		     - Add current anim frame offset
    525  f205		       85 86		      sta	P0ANMSET	;		     - Store frame to P0 Animation
    526  f207
    527  f207							;; Lane Check Loop
    528  f207		       a4 81		      ldy	P0POSY
    529  f209		       a9 10		      lda	#X_LANE_START	;		     - Sets a to bottom bounds
    530  f20b				   .RIGHT_NEXT_LANE		;		     -
    531  f20b		       69 1e		      adc	#X_LANE_UPDATE	;		     - Lane loop value
    532  f20d				   .RIGHT_LOOP		;		     -
    533  f20d		       18		      clc		;		     -
    534  f20e		       c5 81		      cmp	P0POSY	;		     -
    535  f210		       30 f9		      BMI	.RIGHT_NEXT_LANE	;		     - Y is above A Lane so check Lane above
    536  f212		       e9 07		      sbc	#X_LANE_WALK_UP	;		     - Walk up zone		
    537  f214		       c5 81		      cmp	P0POSY	;		     - 
    538  f216		       30 12		      BMI	.RIGHT_WALK_UP	;		     - Branch to walk up if Y is <
    539  f218		       e9 07		      sbc	#X_LANE_BLOCKED	;		     - Subtract to Blocked walk value
    540  f21a		       c5 81		      cmp	P0POSY	;		     - 
    541  f21c		       30 12		      BMI	.RIGHT_DONT_MOVE	;		     - Branch to blocked walk if Y is <
    542  f21e		       e9 0f		      sbc	#X_LANE_WALK_DOWN	;		     - Subtract to Walk down value
    543  f220		       c5 81		      cmp	P0POSY	;		     - 
    544  f222		       f0 0f		      BEQ	.RIGHT_WALK	;		     - Branch to walk RIGHT if Y = 
    545  f224				   .RIGHT_WALK_DOWN		;		     -
    546  f224		       88		      dey		;		     - Move down 1
    547  f225		       84 81		      sty	P0POSY	;		     - 
    548  f227		       4c 3d f2 	      jmp	.RIGHT_RETURN	;		     - 
    549  f22a				   .RIGHT_WALK_UP		;		     - 
    550  f22a		       c8		      iny		;		     - 
    551  f22b		       84 81		      sty	P0POSY	;		     - 
    552  f22d		       4c 3d f2 	      jmp	.RIGHT_RETURN	;		     - 
    553  f230				   .RIGHT_DONT_MOVE		;		     - 
    554  f230		       4c 3d f2 	      jmp	.RIGHT_RETURN	;		     - 
    555  f233				   .RIGHT_WALK		;		     - 
    556  f233		       e8		      inx		;		     - Move RIGHT
    557  f234		       4c 37 f2 	      jmp	.RIGHT_EXIT	;		     - 
    558  f237				   .RIGHT_EXIT		;		     - 
    559  f237		       e0 6c		      cpx	#RIGHT_BOUNDS	;		     - Test new X position against RIGHT of level
    560  f239		       f0 02		      beq	.RIGHT_RETURN	;		     - Skip storing update if out of bounds
    561  f23b		       86 80		      stx	P0POSX	;		     - Store new X position
    562  f23d				   .RIGHT_RETURN		;		     - Don't add any more direction (We only support 4 direction movement)
    563  f23d		       60		      rts		;		     -
    564  f23e				   INP_P0_RST		;		     - Reset animation cause there was no input
    565  f23e		       a9 00		      lda	#SPRITE_OFFSET_IDLE	;		     - Idle Animation Frame base address
    566  f240		       18		      clc		;		     - Clear the carry flag
    567  f241		       65 8a		      adc	ANIM_FRAME	;		     - Add current anim frame offset
    568  f243		       85 86		      sta	P0ANMSET	;		     - Store frame to P0 Animation
    569  f245				   IPT_P0_ND  Subroutine		;		     - End animation
    570  f245		       60		      rts
    571  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    572  f246							;; Start next frame
    573  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    574  f246				   NEXTFRAME
    575  f246		       4c 37 f0 	      jmp	STARTFRAME
    576  f249							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    577  f249							;; Check for object collision
    578  f249							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    579  f249
    580  f249				   CKCOLP0PF  subroutine
    581  f249		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    582  f24b		       24 02		      bit	CXP0FB	; Check CXP0FB with above pattern
    583  f24d		       d0 03		      bne	.COLP0PF	; if Collision P0 PF happened
    584  f24f		       4c 53 f2 	      jmp	ENDCKCOL	; else, skip
    585  f252				   .COLP0PF
    586  f252		       60		      rts		; Go back to caller and they remove direction
    587  f253
    588  f253				   ENDCKCOL		; Fallback
    589  f253		       85 2c		      sta	CXCLR	; Reset Collision
    590  f255		       4c 37 f0 	      jmp	STARTFRAME	; Didn't collide go to next frame
    591  f258
    592  f258							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    593  f258							;; Sprites
    594  f258							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    595  f258		       00 44	   FRAMETEST  =	#$44
    596  f258							;PLAYER_HEIGHT = #17
    597  f258				   IdleSprite
    598  f258		       00		      .byte.b	#%00000000	;$0E
    599  f259		       28		      .byte.b	#%00101000	;$58
    600  f25a		       28		      .byte.b	#%00101000	;$58
    601  f25b		       38		      .byte.b	#%00111000	;$0E
    602  f25c		       38		      .byte.b	#%00111000	;$9A
    603  f25d		       82		      .byte.b	#%10000010	;$42
    604  f25e		       ba		      .byte.b	#%10111010	;$02
    605  f25f		       fe		      .byte.b	#%11111110	;$9A
    606  f260		       7c		      .byte.b	#%01111100	;$9A
    607  f261		       38		      .byte.b	#%00111000	;$0E
    608  f262		       7c		      .byte.b	#%01111100	;$58
    609  f263		       44		      .byte.b	#%01000100	;$0E
    610  f264		       44		      .byte.b	#%01000100	;$0E
    611  f265		       7c		      .byte.b	#%01111100	;$58
    612  f266		       38		      .byte.b	#%00111000	;$0E
    613  f267		       0c		      .byte.b	#%00001100	;$58
    614  f268		       0c		      .byte.b	#%00001100	;$58
    615  f268		       00 11	   PLAYER_HEIGHT =	* - IdleSprite
    616  f269				   DownSprite
    617  f269		       00		      .byte.b	#%00000000	;$0E
    618  f26a		       20		      .byte.b	#%00100000	;$58
    619  f26b		       28		      .byte.b	#%00101000	;$58
    620  f26c		       38		      .byte.b	#%00111000	;$0E
    621  f26d		       38		      .byte.b	#%00111000	;$9A
    622  f26e		       02		      .byte.b	#%00000010	;$42
    623  f26f		       ba		      .byte.b	#%10111010	;$02
    624  f270		       fe		      .byte.b	#%11111110	;$9A
    625  f271		       7c		      .byte.b	#%01111100	;$9A
    626  f272		       38		      .byte.b	#%00111000	;$0E
    627  f273		       7c		      .byte.b	#%01111100	;$58
    628  f274		       4c		      .byte.b	#%01001100	;$0E
    629  f275		       4c		      .byte.b	#%01001100	;$0E
    630  f276		       7c		      .byte.b	#%01111100	;$58
    631  f277		       38		      .byte.b	#%00111000	;$0E
    632  f278		       0c		      .byte.b	#%00001100	;$58
    633  f279		       0c		      .byte.b	#%00001100	;$58
    634  f27a				   UpSprite
    635  f27a		       00		      .byte.b	#%00000000	;$0E
    636  f27b		       20		      .byte.b	#%00100000	;$58
    637  f27c		       28		      .byte.b	#%00101000	;$58
    638  f27d		       38		      .byte.b	#%00111000	;$0E
    639  f27e		       38		      .byte.b	#%00111000	;$9A
    640  f27f		       02		      .byte.b	#%00000010	;$42
    641  f280		       ba		      .byte.b	#%10111010	;$02
    642  f281		       fe		      .byte.b	#%11111110	;$9A
    643  f282		       7c		      .byte.b	#%01111100	;$9A
    644  f283		       38		      .byte.b	#%00111000	;$0E
    645  f284		       7c		      .byte.b	#%01111100	;$58
    646  f285		       7c		      .byte.b	#%01111100	;$0E
    647  f286		       7c		      .byte.b	#%01111100	;$0E
    648  f287		       7c		      .byte.b	#%01111100	;$58
    649  f288		       38		      .byte.b	#%00111000	;$0E
    650  f289		       60		      .byte.b	#%01100000	;$58
    651  f28a		       60		      .byte.b	#%01100000	;$58
    652  f28b				   RightSprite
    653  f28b		       00		      .byte.b	#%00000000	;$0E
    654  f28c		       4c		      .byte.b	#%01001100	;$58
    655  f28d		       68		      .byte.b	#%01101000	;$58
    656  f28e		       38		      .byte.b	#%00111000	;$0E
    657  f28f		       38		      .byte.b	#%00111000	;$9A
    658  f290		       44		      .byte.b	#%01000100	;$42
    659  f291		       78		      .byte.b	#%01111000	;$02
    660  f292		       78		      .byte.b	#%01111000	;$9A
    661  f293		       38		      .byte.b	#%00111000	;$9A
    662  f294		       38		      .byte.b	#%00111000	;$0E
    663  f295		       7c		      .byte.b	#%01111100	;$58
    664  f296		       60		      .byte.b	#%01100000	;$0E
    665  f297		       60		      .byte.b	#%01100000	;$0E
    666  f298		       7c		      .byte.b	#%01111100	;$58
    667  f299		       38		      .byte.b	#%00111000	;$0E
    668  f29a		       30		      .byte.b	#%00110000	;$58
    669  f29b		       30		      .byte.b	#%00110000	;$58
    670  f29c				   IdleSprite1
    671  f29c		       00		      .byte.b	#%00000000	;$0E
    672  f29d		       28		      .byte.b	#%00101000	;$58
    673  f29e		       28		      .byte.b	#%00101000	;$58
    674  f29f		       38		      .byte.b	#%00111000	;$0E
    675  f2a0		       38		      .byte.b	#%00111000	;$9A
    676  f2a1		       44		      .byte.b	#%01000100	;$42
    677  f2a2		       ba		      .byte.b	#%10111010	;$02
    678  f2a3		       fe		      .byte.b	#%11111110	;$9A
    679  f2a4		       7c		      .byte.b	#%01111100	;$9A
    680  f2a5		       38		      .byte.b	#%00111000	;$0E
    681  f2a6		       7c		      .byte.b	#%01111100	;$58
    682  f2a7		       44		      .byte.b	#%01000100	;$0E
    683  f2a8		       44		      .byte.b	#%01000100	;$0E
    684  f2a9		       7c		      .byte.b	#%01111100	;$58
    685  f2aa		       38		      .byte.b	#%00111000	;$0E
    686  f2ab		       0c		      .byte.b	#%00001100	;$58
    687  f2ac		       0c		      .byte.b	#%00001100	;$58
    688  f2ad				   DownSprite1
    689  f2ad		       00		      .byte.b	#%00000000	;$0E
    690  f2ae		       08		      .byte.b	#%00001000	;$58
    691  f2af		       28		      .byte.b	#%00101000	;$58
    692  f2b0		       38		      .byte.b	#%00111000	;$0E
    693  f2b1		       38		      .byte.b	#%00111000	;$9A
    694  f2b2		       80		      .byte.b	#%10000000	;$42
    695  f2b3		       ba		      .byte.b	#%10111010	;$02
    696  f2b4		       fe		      .byte.b	#%11111110	;$9A
    697  f2b5		       7c		      .byte.b	#%01111100	;$9A
    698  f2b6		       38		      .byte.b	#%00111000	;$0E
    699  f2b7		       7c		      .byte.b	#%01111100	;$58
    700  f2b8		       64		      .byte.b	#%01100100	;$0E
    701  f2b9		       64		      .byte.b	#%01100100	;$0E
    702  f2ba		       7c		      .byte.b	#%01111100	;$58
    703  f2bb		       38		      .byte.b	#%00111000	;$0E
    704  f2bc		       60		      .byte.b	#%01100000	;$58
    705  f2bd		       60		      .byte.b	#%01100000	;$58
    706  f2be				   UpSprite1
    707  f2be		       00		      .byte.b	#%00000000	;$0E
    708  f2bf		       08		      .byte.b	#%00001000	;$58
    709  f2c0		       28		      .byte.b	#%00101000	;$58
    710  f2c1		       38		      .byte.b	#%00111000	;$0E
    711  f2c2		       38		      .byte.b	#%00111000	;$9A
    712  f2c3		       80		      .byte.b	#%10000000	;$42
    713  f2c4		       ba		      .byte.b	#%10111010	;$02
    714  f2c5		       fe		      .byte.b	#%11111110	;$9A
    715  f2c6		       7c		      .byte.b	#%01111100	;$9A
    716  f2c7		       38		      .byte.b	#%00111000	;$0E
    717  f2c8		       7c		      .byte.b	#%01111100	;$58
    718  f2c9		       7c		      .byte.b	#%01111100	;$0E
    719  f2ca		       7c		      .byte.b	#%01111100	;$0E
    720  f2cb		       7c		      .byte.b	#%01111100	;$58
    721  f2cc		       38		      .byte.b	#%00111000	;$0E
    722  f2cd		       0c		      .byte.b	#%00001100	;$58
    723  f2ce		       0c		      .byte.b	#%00001100	;$58
    724  f2cf				   RightSprite1
    725  f2cf		       00		      .byte.b	#%00000000	;$0E
    726  f2d0		       18		      .byte.b	#%00011000	;$58
    727  f2d1		       30		      .byte.b	#%00110000	;$58
    728  f2d2		       38		      .byte.b	#%00111000	;$0E
    729  f2d3		       38		      .byte.b	#%00111000	;$9A
    730  f2d4		       30		      .byte.b	#%00110000	;$42
    731  f2d5		       38		      .byte.b	#%00111000	;$02
    732  f2d6		       38		      .byte.b	#%00111000	;$9A
    733  f2d7		       38		      .byte.b	#%00111000	;$9A
    734  f2d8		       38		      .byte.b	#%00111000	;$0E
    735  f2d9		       7c		      .byte.b	#%01111100	;$58
    736  f2da		       70		      .byte.b	#%01110000	;$0E
    737  f2db		       70		      .byte.b	#%01110000	;$0E
    738  f2dc		       7c		      .byte.b	#%01111100	;$58
    739  f2dd		       38		      .byte.b	#%00111000	;$0E
    740  f2de		       60		      .byte.b	#%01100000	;$58
    741  f2df		       60		      .byte.b	#%01100000	;$58  
    742  f2e0
    743  f2e0							;---End Graphics Data---
    744  f2e0
    745  f2e0				   Bomb0
    746  f2e0		       00		      .byte.b	#%00000000	;$0E
    747  f2e1		       18		      .byte.b	#%00011000	;$0E
    748  f2e2		       3c		      .byte.b	#%00111100	;$0E
    749  f2e3		       3c		      .byte.b	#%00111100	;$0E
    750  f2e4		       3c		      .byte.b	#%00111100	;$0E
    751  f2e5		       3c		      .byte.b	#%00111100	;$0E
    752  f2e6		       18		      .byte.b	#%00011000	;$0E
    753  f2e7		       0a		      .byte.b	#%00001010	;$1C
    754  f2e8		       04		      .byte.b	#%00000100	;$1C
    755  f2e9
    756  f2e9							;---Color Data from PlayerPal 2600---
    757  f2e9				   ColorFrame0
    758  f2e9		       0e		      .byte.b	#$0E	;
    759  f2ea		       58		      .byte.b	#$58	;
    760  f2eb		       58		      .byte.b	#$58	;
    761  f2ec		       0e		      .byte.b	#$0E	;
    762  f2ed		       9a		      .byte.b	#$9A	;
    763  f2ee		       42		      .byte.b	#$42	;
    764  f2ef		       02		      .byte.b	#$02	;
    765  f2f0		       9a		      .byte.b	#$9A	;
    766  f2f1		       9a		      .byte.b	#$9A	;
    767  f2f2		       0e		      .byte.b	#$0E	;
    768  f2f3		       58		      .byte.b	#$58	;
    769  f2f4		       0e		      .byte.b	#$0E	;
    770  f2f5		       0e		      .byte.b	#$0E	;
    771  f2f6		       58		      .byte.b	#$58	;
    772  f2f7		       0e		      .byte.b	#$0E	;
    773  f2f8		       58		      .byte.b	#$58	;
    774  f2f9		       58		      .byte.b	#$58	;
    775  f2fa				   ColorFrame1
    776  f2fa		       0e		      .byte.b	#$0E	;
    777  f2fb		       58		      .byte.b	#$58	;
    778  f2fc		       58		      .byte.b	#$58	;
    779  f2fd		       0e		      .byte.b	#$0E	;
    780  f2fe		       9a		      .byte.b	#$9A	;
    781  f2ff		       42		      .byte.b	#$42	;
    782  f300		       02		      .byte.b	#$02	;
    783  f301		       9a		      .byte.b	#$9A	;
    784  f302		       9a		      .byte.b	#$9A	;
    785  f303		       0e		      .byte.b	#$0E	;
    786  f304		       58		      .byte.b	#$58	;
    787  f305		       0e		      .byte.b	#$0E	;
    788  f306		       0e		      .byte.b	#$0E	;
    789  f307		       58		      .byte.b	#$58	;
    790  f308		       0e		      .byte.b	#$0E	;
    791  f309		       58		      .byte.b	#$58	;
    792  f30a		       58		      .byte.b	#$58	;
    793  f30b				   ColorFrame2
    794  f30b		       0e		      .byte.b	#$0E	;
    795  f30c		       58		      .byte.b	#$58	;
    796  f30d		       58		      .byte.b	#$58	;
    797  f30e		       0e		      .byte.b	#$0E	;
    798  f30f		       9a		      .byte.b	#$9A	;
    799  f310		       42		      .byte.b	#$42	;
    800  f311		       02		      .byte.b	#$02	;
    801  f312		       9a		      .byte.b	#$9A	;
    802  f313		       9a		      .byte.b	#$9A	;
    803  f314		       0e		      .byte.b	#$0E	;
    804  f315		       58		      .byte.b	#$58	;
    805  f316		       0e		      .byte.b	#$0E	;
    806  f317		       0e		      .byte.b	#$0E	;
    807  f318		       58		      .byte.b	#$58	;
    808  f319		       0e		      .byte.b	#$0E	;
    809  f31a		       58		      .byte.b	#$58	;
    810  f31b		       58		      .byte.b	#$58	;
    811  f31c				   ColorFrame3
    812  f31c		       0e		      .byte.b	#$0E	;
    813  f31d		       58		      .byte.b	#$58	;
    814  f31e		       58		      .byte.b	#$58	;
    815  f31f		       0e		      .byte.b	#$0E	;
    816  f320		       9a		      .byte.b	#$9A	;
    817  f321		       42		      .byte.b	#$42	;
    818  f322		       02		      .byte.b	#$02	;
    819  f323		       9a		      .byte.b	#$9A	;
    820  f324		       9a		      .byte.b	#$9A	;
    821  f325		       0e		      .byte.b	#$0E	;
    822  f326		       58		      .byte.b	#$58	;
    823  f327		       0e		      .byte.b	#$0E	;
    824  f328		       0e		      .byte.b	#$0E	;
    825  f329		       58		      .byte.b	#$58	;
    826  f32a		       0e		      .byte.b	#$0E	;
    827  f32b		       58		      .byte.b	#$58	;
    828  f32c		       58		      .byte.b	#$58	;
    829  f32d				   ColorFrame4
    830  f32d		       0e		      .byte.b	#$0E	;
    831  f32e		       58		      .byte.b	#$58	;
    832  f32f		       58		      .byte.b	#$58	;
    833  f330		       0e		      .byte.b	#$0E	;
    834  f331		       9a		      .byte.b	#$9A	;
    835  f332		       42		      .byte.b	#$42	;
    836  f333		       02		      .byte.b	#$02	;
    837  f334		       9a		      .byte.b	#$9A	;
    838  f335		       9a		      .byte.b	#$9A	;
    839  f336		       0e		      .byte.b	#$0E	;
    840  f337		       58		      .byte.b	#$58	;
    841  f338		       0e		      .byte.b	#$0E	;
    842  f339		       0e		      .byte.b	#$0E	;
    843  f33a		       58		      .byte.b	#$58	;
    844  f33b		       0e		      .byte.b	#$0E	;
    845  f33c		       58		      .byte.b	#$58	;
    846  f33d		       58		      .byte.b	#$58	;
    847  f33e				   ColorFrame5
    848  f33e		       0e		      .byte.b	#$0E	;
    849  f33f		       58		      .byte.b	#$58	;
    850  f340		       58		      .byte.b	#$58	;
    851  f341		       0e		      .byte.b	#$0E	;
    852  f342		       9a		      .byte.b	#$9A	;
    853  f343		       42		      .byte.b	#$42	;
    854  f344		       02		      .byte.b	#$02	;
    855  f345		       9a		      .byte.b	#$9A	;
    856  f346		       9a		      .byte.b	#$9A	;
    857  f347		       0e		      .byte.b	#$0E	;
    858  f348		       58		      .byte.b	#$58	;
    859  f349		       0e		      .byte.b	#$0E	;
    860  f34a		       0e		      .byte.b	#$0E	;
    861  f34b		       58		      .byte.b	#$58	;
    862  f34c		       0e		      .byte.b	#$0E	;
    863  f34d		       58		      .byte.b	#$58	;
    864  f34e		       58		      .byte.b	#$58	;
    865  f34f				   ColorFrame6
    866  f34f		       0e		      .byte.b	#$0E	;
    867  f350		       58		      .byte.b	#$58	;
    868  f351		       58		      .byte.b	#$58	;
    869  f352		       0e		      .byte.b	#$0E	;
    870  f353		       9a		      .byte.b	#$9A	;
    871  f354		       42		      .byte.b	#$42	;
    872  f355		       02		      .byte.b	#$02	;
    873  f356		       9a		      .byte.b	#$9A	;
    874  f357		       9a		      .byte.b	#$9A	;
    875  f358		       0e		      .byte.b	#$0E	;
    876  f359		       58		      .byte.b	#$58	;
    877  f35a		       0e		      .byte.b	#$0E	;
    878  f35b		       0e		      .byte.b	#$0E	;
    879  f35c		       58		      .byte.b	#$58	;
    880  f35d		       0e		      .byte.b	#$0E	;
    881  f35e		       58		      .byte.b	#$58	;
    882  f35f		       58		      .byte.b	#$58	;
    883  f360				   ColorFrame7
    884  f360		       0e		      .byte.b	#$0E	;
    885  f361		       58		      .byte.b	#$58	;
    886  f362		       58		      .byte.b	#$58	;
    887  f363		       0e		      .byte.b	#$0E	;
    888  f364		       9a		      .byte.b	#$9A	;
    889  f365		       42		      .byte.b	#$42	;
    890  f366		       02		      .byte.b	#$02	;
    891  f367		       9a		      .byte.b	#$9A	;
    892  f368		       9a		      .byte.b	#$9A	;
    893  f369		       0e		      .byte.b	#$0E	;
    894  f36a		       58		      .byte.b	#$58	;
    895  f36b		       0e		      .byte.b	#$0E	;
    896  f36c		       0e		      .byte.b	#$0E	;
    897  f36d		       58		      .byte.b	#$58	;
    898  f36e		       0e		      .byte.b	#$0E	;
    899  f36f		       58		      .byte.b	#$58	;
    900  f370		       58		      .byte.b	#$58	;     
    901  f371							;---End Color Data---
    902  f371							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    903  f371							;; Arena
    904  f371							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    905  f371				   ARENA_0_PF0
    906  f371		       f0		      .byte.b	%11110000
    907  f372		       10		      .byte.b	%00010000
    908  f373		       50		      .byte.b	%01010000
    909  f374		       10		      .byte.b	%00010000
    910  f375		       50		      .byte.b	%01010000
    911  f376		       10		      .byte.b	%00010000
    912  f377		       50		      .byte.b	%01010000
    913  f378		       10		      .byte.b	%00010000
    914  f379		       50		      .byte.b	%01010000
    915  f37a		       10		      .byte.b	%00010000
    916  f37b		       50		      .byte.b	%01010000
    917  f37c		       10		      .byte.b	%00010000
    918  f37d		       f0		      .byte.b	%11110000
    919  f37e
    920  f37e				   ARENA_0_PF1
    921  f37e		       e0		      .byte.b	%11100000
    922  f37f		       e6		      .byte.b	%11100110
    923  f380		       e0		      .byte.b	%11100000
    924  f381		       e6		      .byte.b	%11100110
    925  f382		       e0		      .byte.b	%11100000
    926  f383		       e6		      .byte.b	%11100110
    927  f384		       e0		      .byte.b	%11100000
    928  f385		       e6		      .byte.b	%11100110
    929  f386		       e0		      .byte.b	%11100000
    930  f387		       e6		      .byte.b	%11100110
    931  f388		       e0		      .byte.b	%11100000
    932  f389
    933  f389				   ARENA_0_PF2
    934  f389		       00		      .byte.b	%00000000
    935  f38a		       66		      .byte.b	%01100110
    936  f38b		       00		      .byte.b	%00000000
    937  f38c		       66		      .byte.b	%01100110
    938  f38d		       00		      .byte.b	%00000000
    939  f38e		       66		      .byte.b	%01100110
    940  f38f		       00		      .byte.b	%00000000
    941  f390		       66		      .byte.b	%01100110
    942  f391		       00		      .byte.b	%00000000
    943  f392		       66		      .byte.b	%01100110
    944  f393		       00		      .byte.b	%00000000
    945  f394
    946  f394
    947  f394							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    948  f394							;; Complete ROM size
    949  f394							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    950  fffc					      org	$FFFC	; Move to position $FFFC
    951  fffc		       00 f0		      .word.w	RESET	; Write 2 bytes with reset address
    952  fffe		       00 f0		      .word.w	RESET	; Write 2 bytes with interruption vector
